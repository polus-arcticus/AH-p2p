# ipfs clients
# port map npm run to inner containers
# pin service, open lobby thing
#
#
version: '3.9'

# This is an example docker-compose file to quickly test an IPFS Cluster
# with multiple peers on a contained environment.

# It runs 3 cluster peers (cluster0, cluster1...) attached to go-ipfs daemons
# (ipfs0, ipfs1...) using the CRDT consensus component. Cluster peers
# autodiscover themselves using mDNS on the docker internal network.
#
# To interact with the cluster use "ipfs-cluster-ctl" (the cluster0 API port is
# exposed to the locahost. You can also "docker exec -ti cluster0 sh" and run
# it from the container. "ipfs-cluster-ctl peers ls" should show all 3 peers a few
# seconds after start.
#
# For persistence, a "compose" folder is created and used to store configurations
# and states. This can be used to edit configurations in subsequent runs. It looks
# as follows:
#
# compose/
# |-- cluster0
# |-- cluster1
# |-- ...
# |-- ipfs0
# |-- ipfs1
# |-- ...
#
# During the first start, default configurations are created for all peers.

services:
  ganache-cli:
    image: trufflesuite/ganache-cli:latest
    entrypoint:
      - node
      - /app/ganache-core.docker.cli.js
      - --deterministic
      - --mnemonic
      - ${MNEMONIC}
      - --chainId
      - '31337'
      - -b
      - ${BLOCKSPEED}
      - --gasLimit
      - ${GASLIMIT}
      - --gasPrice
      - ${GASPRICE}
    env_file:
      - .env
    ports:
      - "8545:8545"

  hardhat-deploy:
    build:
      context: ./hardhat
      dockerfile: Dockerfile.dev
    env_file:
      - .env
    volumes: 
      - ./hardhat:/hardhat
      - /hardhat/node_modules
      - ./web:/web:rw
    links:
      - ganache-cli
    command: bash -c "while ! curl -s ganache-cli:8545 > /dev/null; do echo waiting for xxx; sleep 3; done; npm run deploy:docker"
    #ports:
      #- 8545:8545

#  js-libp2p-webrtc-star:
#    image: libp2p/js-libp2p-webrtc-star
#    environment:
#      - VIRTUAL_HOST=${DOMAIN}
#      - LETSENCRYPT_HOST=${DOMAIN}
#      - VIRTUAL_PORT=9090
#
#  nginx-proxy:
#    image: jwilder/nginx-proxy
#    ports:
#      - 443:443
#      - 80:80
#    container_name: nginx-proxy
#    volumes:
#      - /var/run/docker.sock:/tmp/docker.sock:ro
#      - nginx-certs:/etc/nginx/certs
#      - nginx-vhost:/etc/nginx/vhost.d
#      - nginx-html:/usr/share/nginx/html
#    depends_on:
#      - js-libp2p-webrtc-star
#
#  nginx-proxy-letsencrypt:
#    image: jrcs/letsencrypt-nginx-proxy-companion
#    environment:
#      NGINX_PROXY_CONTAINER: "nginx-proxy"
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#      - nginx-certs:/etc/nginx/certs
#      - nginx-vhost:/etc/nginx/vhost.d
#      - nginx-html:/usr/share/nginx/html
#
  web-user:
    depends_on:
      - ganache-cli
      - hardhat-deploy
    build:
      context: ./web
      dockerfile: ./Dockerfile.dev
    command: npm run dev
    volumes:
      - ./web/:/app:rw
      - /app/node_modules
    ports:
      - "5173:5173"
    environment:
      - PORT=5173 
#
#  web-user-2:
#    build:
#      context: ./ipfs-webrtc
#      dockerfile: ./Dockerfile.dev
#    command: npm run dev
#    volumes:
#      - ./ipfs-webrtc:/app/
#      - ignore:/app/node_modules
#    ports:
#      - "5174:5174"
#    environment:
#      - PORT=5174

volumes:
  nginx-certs:
  nginx-vhost:
  nginx-html:
  ignore:
